name: CI/CD

on:
  workflow_dispatch:


jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15.3
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '20'

      - name: Set environment variables
        run: |
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/test" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV

      - name: Run tests
        run: mvn clean test

      - name: Build with Maven
        run: mvn package

      - name: List files
        run: ls -l target/

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: app-jar
          path: target/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: app-jar
          path: target/

      - name: Copy files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2HOSTNAME }}
          username: ${{ secrets.EC2USERNAME }}
          key: ${{ secrets.EC2SSH_KEY }}
          source: "target/*.jar"
          target: "/path/to/deploy/directory"

      - name: Restart service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2HOSTNAME }}
          username: ${{ secrets.EC2USERNAME }}
          key: ${{ secrets.EC2SSH_KEY }}
          script: |
            sudo systemctl stop my-service
            sudo systemctl start my-service
